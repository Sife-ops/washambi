//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var DomainsTags = newDomainsTagsTable("nuland", "domains_tags", "")

type domainsTagsTable struct {
	postgres.Table

	// Columns
	ID       postgres.ColumnString
	DomainID postgres.ColumnString
	TagID    postgres.ColumnString

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type DomainsTagsTable struct {
	domainsTagsTable

	EXCLUDED domainsTagsTable
}

// AS creates new DomainsTagsTable with assigned alias
func (a DomainsTagsTable) AS(alias string) *DomainsTagsTable {
	return newDomainsTagsTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new DomainsTagsTable with assigned schema name
func (a DomainsTagsTable) FromSchema(schemaName string) *DomainsTagsTable {
	return newDomainsTagsTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new DomainsTagsTable with assigned table prefix
func (a DomainsTagsTable) WithPrefix(prefix string) *DomainsTagsTable {
	return newDomainsTagsTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new DomainsTagsTable with assigned table suffix
func (a DomainsTagsTable) WithSuffix(suffix string) *DomainsTagsTable {
	return newDomainsTagsTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newDomainsTagsTable(schemaName, tableName, alias string) *DomainsTagsTable {
	return &DomainsTagsTable{
		domainsTagsTable: newDomainsTagsTableImpl(schemaName, tableName, alias),
		EXCLUDED:         newDomainsTagsTableImpl("", "excluded", ""),
	}
}

func newDomainsTagsTableImpl(schemaName, tableName, alias string) domainsTagsTable {
	var (
		IDColumn       = postgres.StringColumn("id")
		DomainIDColumn = postgres.StringColumn("domain_id")
		TagIDColumn    = postgres.StringColumn("tag_id")
		allColumns     = postgres.ColumnList{IDColumn, DomainIDColumn, TagIDColumn}
		mutableColumns = postgres.ColumnList{DomainIDColumn, TagIDColumn}
	)

	return domainsTagsTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:       IDColumn,
		DomainID: DomainIDColumn,
		TagID:    TagIDColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
