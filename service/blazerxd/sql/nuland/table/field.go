//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var Field = newFieldTable("nuland", "field", "")

type fieldTable struct {
	postgres.Table

	// Columns
	ID        postgres.ColumnString
	ProfileID postgres.ColumnString
	Name      postgres.ColumnString
	Hidden    postgres.ColumnBool
	CreatedAt postgres.ColumnTimestamp
	DeletedAt postgres.ColumnTimestamp

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type FieldTable struct {
	fieldTable

	EXCLUDED fieldTable
}

// AS creates new FieldTable with assigned alias
func (a FieldTable) AS(alias string) *FieldTable {
	return newFieldTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new FieldTable with assigned schema name
func (a FieldTable) FromSchema(schemaName string) *FieldTable {
	return newFieldTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new FieldTable with assigned table prefix
func (a FieldTable) WithPrefix(prefix string) *FieldTable {
	return newFieldTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new FieldTable with assigned table suffix
func (a FieldTable) WithSuffix(suffix string) *FieldTable {
	return newFieldTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newFieldTable(schemaName, tableName, alias string) *FieldTable {
	return &FieldTable{
		fieldTable: newFieldTableImpl(schemaName, tableName, alias),
		EXCLUDED:   newFieldTableImpl("", "excluded", ""),
	}
}

func newFieldTableImpl(schemaName, tableName, alias string) fieldTable {
	var (
		IDColumn        = postgres.StringColumn("id")
		ProfileIDColumn = postgres.StringColumn("profile_id")
		NameColumn      = postgres.StringColumn("name")
		HiddenColumn    = postgres.BoolColumn("hidden")
		CreatedAtColumn = postgres.TimestampColumn("created_at")
		DeletedAtColumn = postgres.TimestampColumn("deleted_at")
		allColumns      = postgres.ColumnList{IDColumn, ProfileIDColumn, NameColumn, HiddenColumn, CreatedAtColumn, DeletedAtColumn}
		mutableColumns  = postgres.ColumnList{ProfileIDColumn, NameColumn, HiddenColumn, CreatedAtColumn, DeletedAtColumn}
	)

	return fieldTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:        IDColumn,
		ProfileID: ProfileIDColumn,
		Name:      NameColumn,
		Hidden:    HiddenColumn,
		CreatedAt: CreatedAtColumn,
		DeletedAt: DeletedAtColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
