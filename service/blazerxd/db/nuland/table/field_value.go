//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var FieldValue = newFieldValueTable("nuland", "field_value", "")

type fieldValueTable struct {
	postgres.Table

	// Columns
	ID        postgres.ColumnString
	FieldID   postgres.ColumnString
	Name      postgres.ColumnString
	CreatedAt postgres.ColumnTimestamp

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type FieldValueTable struct {
	fieldValueTable

	EXCLUDED fieldValueTable
}

// AS creates new FieldValueTable with assigned alias
func (a FieldValueTable) AS(alias string) *FieldValueTable {
	return newFieldValueTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new FieldValueTable with assigned schema name
func (a FieldValueTable) FromSchema(schemaName string) *FieldValueTable {
	return newFieldValueTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new FieldValueTable with assigned table prefix
func (a FieldValueTable) WithPrefix(prefix string) *FieldValueTable {
	return newFieldValueTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new FieldValueTable with assigned table suffix
func (a FieldValueTable) WithSuffix(suffix string) *FieldValueTable {
	return newFieldValueTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newFieldValueTable(schemaName, tableName, alias string) *FieldValueTable {
	return &FieldValueTable{
		fieldValueTable: newFieldValueTableImpl(schemaName, tableName, alias),
		EXCLUDED:        newFieldValueTableImpl("", "excluded", ""),
	}
}

func newFieldValueTableImpl(schemaName, tableName, alias string) fieldValueTable {
	var (
		IDColumn        = postgres.StringColumn("id")
		FieldIDColumn   = postgres.StringColumn("field_id")
		NameColumn      = postgres.StringColumn("name")
		CreatedAtColumn = postgres.TimestampColumn("created_at")
		allColumns      = postgres.ColumnList{IDColumn, FieldIDColumn, NameColumn, CreatedAtColumn}
		mutableColumns  = postgres.ColumnList{FieldIDColumn, NameColumn, CreatedAtColumn}
	)

	return fieldValueTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:        IDColumn,
		FieldID:   FieldIDColumn,
		Name:      NameColumn,
		CreatedAt: CreatedAtColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
