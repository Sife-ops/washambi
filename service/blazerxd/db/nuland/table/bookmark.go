//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var Bookmark = newBookmarkTable("nuland", "bookmark", "")

type bookmarkTable struct {
	postgres.Table

	// Columns
	ID          postgres.ColumnString
	UserID      postgres.ColumnString
	DomainID    postgres.ColumnString
	Description postgres.ColumnString
	URL         postgres.ColumnString
	CreatedAt   postgres.ColumnTimestamp
	DeletedAt   postgres.ColumnTimestamp

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type BookmarkTable struct {
	bookmarkTable

	EXCLUDED bookmarkTable
}

// AS creates new BookmarkTable with assigned alias
func (a BookmarkTable) AS(alias string) *BookmarkTable {
	return newBookmarkTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new BookmarkTable with assigned schema name
func (a BookmarkTable) FromSchema(schemaName string) *BookmarkTable {
	return newBookmarkTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new BookmarkTable with assigned table prefix
func (a BookmarkTable) WithPrefix(prefix string) *BookmarkTable {
	return newBookmarkTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new BookmarkTable with assigned table suffix
func (a BookmarkTable) WithSuffix(suffix string) *BookmarkTable {
	return newBookmarkTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newBookmarkTable(schemaName, tableName, alias string) *BookmarkTable {
	return &BookmarkTable{
		bookmarkTable: newBookmarkTableImpl(schemaName, tableName, alias),
		EXCLUDED:      newBookmarkTableImpl("", "excluded", ""),
	}
}

func newBookmarkTableImpl(schemaName, tableName, alias string) bookmarkTable {
	var (
		IDColumn          = postgres.StringColumn("id")
		UserIDColumn      = postgres.StringColumn("user_id")
		DomainIDColumn    = postgres.StringColumn("domain_id")
		DescriptionColumn = postgres.StringColumn("description")
		URLColumn         = postgres.StringColumn("url")
		CreatedAtColumn   = postgres.TimestampColumn("created_at")
		DeletedAtColumn   = postgres.TimestampColumn("deleted_at")
		allColumns        = postgres.ColumnList{IDColumn, UserIDColumn, DomainIDColumn, DescriptionColumn, URLColumn, CreatedAtColumn, DeletedAtColumn}
		mutableColumns    = postgres.ColumnList{UserIDColumn, DomainIDColumn, DescriptionColumn, URLColumn, CreatedAtColumn, DeletedAtColumn}
	)

	return bookmarkTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:          IDColumn,
		UserID:      UserIDColumn,
		DomainID:    DomainIDColumn,
		Description: DescriptionColumn,
		URL:         URLColumn,
		CreatedAt:   CreatedAtColumn,
		DeletedAt:   DeletedAtColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
