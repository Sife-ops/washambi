//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var User = newUserTable("zoomers", "user", "")

type userTable struct {
	postgres.Table

	// Columns
	ID              postgres.ColumnString
	Username        postgres.ColumnString
	Password        postgres.ColumnString
	RecoveryPrompt1 postgres.ColumnString
	RecoveryPrompt2 postgres.ColumnString
	RecoveryPrompt3 postgres.ColumnString
	RecoveryAnswer1 postgres.ColumnString
	RecoveryAnswer2 postgres.ColumnString
	RecoveryAnswer3 postgres.ColumnString
	CreatedAt       postgres.ColumnTimestamp
	UpdatedAt       postgres.ColumnTimestamp
	DeletedAt       postgres.ColumnTimestamp

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type UserTable struct {
	userTable

	EXCLUDED userTable
}

// AS creates new UserTable with assigned alias
func (a UserTable) AS(alias string) *UserTable {
	return newUserTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new UserTable with assigned schema name
func (a UserTable) FromSchema(schemaName string) *UserTable {
	return newUserTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new UserTable with assigned table prefix
func (a UserTable) WithPrefix(prefix string) *UserTable {
	return newUserTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new UserTable with assigned table suffix
func (a UserTable) WithSuffix(suffix string) *UserTable {
	return newUserTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newUserTable(schemaName, tableName, alias string) *UserTable {
	return &UserTable{
		userTable: newUserTableImpl(schemaName, tableName, alias),
		EXCLUDED:  newUserTableImpl("", "excluded", ""),
	}
}

func newUserTableImpl(schemaName, tableName, alias string) userTable {
	var (
		IDColumn              = postgres.StringColumn("id")
		UsernameColumn        = postgres.StringColumn("username")
		PasswordColumn        = postgres.StringColumn("password")
		RecoveryPrompt1Column = postgres.StringColumn("recovery_prompt_1")
		RecoveryPrompt2Column = postgres.StringColumn("recovery_prompt_2")
		RecoveryPrompt3Column = postgres.StringColumn("recovery_prompt_3")
		RecoveryAnswer1Column = postgres.StringColumn("recovery_answer_1")
		RecoveryAnswer2Column = postgres.StringColumn("recovery_answer_2")
		RecoveryAnswer3Column = postgres.StringColumn("recovery_answer_3")
		CreatedAtColumn       = postgres.TimestampColumn("created_at")
		UpdatedAtColumn       = postgres.TimestampColumn("updated_at")
		DeletedAtColumn       = postgres.TimestampColumn("deleted_at")
		allColumns            = postgres.ColumnList{IDColumn, UsernameColumn, PasswordColumn, RecoveryPrompt1Column, RecoveryPrompt2Column, RecoveryPrompt3Column, RecoveryAnswer1Column, RecoveryAnswer2Column, RecoveryAnswer3Column, CreatedAtColumn, UpdatedAtColumn, DeletedAtColumn}
		mutableColumns        = postgres.ColumnList{UsernameColumn, PasswordColumn, RecoveryPrompt1Column, RecoveryPrompt2Column, RecoveryPrompt3Column, RecoveryAnswer1Column, RecoveryAnswer2Column, RecoveryAnswer3Column, CreatedAtColumn, UpdatedAtColumn, DeletedAtColumn}
	)

	return userTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:              IDColumn,
		Username:        UsernameColumn,
		Password:        PasswordColumn,
		RecoveryPrompt1: RecoveryPrompt1Column,
		RecoveryPrompt2: RecoveryPrompt2Column,
		RecoveryPrompt3: RecoveryPrompt3Column,
		RecoveryAnswer1: RecoveryAnswer1Column,
		RecoveryAnswer2: RecoveryAnswer2Column,
		RecoveryAnswer3: RecoveryAnswer3Column,
		CreatedAt:       CreatedAtColumn,
		UpdatedAt:       UpdatedAtColumn,
		DeletedAt:       DeletedAtColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
