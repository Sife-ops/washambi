//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var UsersKanbans = newUsersKanbansTable("tomlinson", "users_kanbans", "")

type usersKanbansTable struct {
	postgres.Table

	// Columns
	ID        postgres.ColumnString
	UserID    postgres.ColumnString
	KanbanID  postgres.ColumnString
	Role      postgres.ColumnString
	CreatedAt postgres.ColumnTimestamp
	UpdatedAt postgres.ColumnTimestamp
	DeletedAt postgres.ColumnTimestamp

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type UsersKanbansTable struct {
	usersKanbansTable

	EXCLUDED usersKanbansTable
}

// AS creates new UsersKanbansTable with assigned alias
func (a UsersKanbansTable) AS(alias string) *UsersKanbansTable {
	return newUsersKanbansTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new UsersKanbansTable with assigned schema name
func (a UsersKanbansTable) FromSchema(schemaName string) *UsersKanbansTable {
	return newUsersKanbansTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new UsersKanbansTable with assigned table prefix
func (a UsersKanbansTable) WithPrefix(prefix string) *UsersKanbansTable {
	return newUsersKanbansTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new UsersKanbansTable with assigned table suffix
func (a UsersKanbansTable) WithSuffix(suffix string) *UsersKanbansTable {
	return newUsersKanbansTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newUsersKanbansTable(schemaName, tableName, alias string) *UsersKanbansTable {
	return &UsersKanbansTable{
		usersKanbansTable: newUsersKanbansTableImpl(schemaName, tableName, alias),
		EXCLUDED:          newUsersKanbansTableImpl("", "excluded", ""),
	}
}

func newUsersKanbansTableImpl(schemaName, tableName, alias string) usersKanbansTable {
	var (
		IDColumn        = postgres.StringColumn("id")
		UserIDColumn    = postgres.StringColumn("user_id")
		KanbanIDColumn  = postgres.StringColumn("kanban_id")
		RoleColumn      = postgres.StringColumn("role")
		CreatedAtColumn = postgres.TimestampColumn("created_at")
		UpdatedAtColumn = postgres.TimestampColumn("updated_at")
		DeletedAtColumn = postgres.TimestampColumn("deleted_at")
		allColumns      = postgres.ColumnList{IDColumn, UserIDColumn, KanbanIDColumn, RoleColumn, CreatedAtColumn, UpdatedAtColumn, DeletedAtColumn}
		mutableColumns  = postgres.ColumnList{UserIDColumn, KanbanIDColumn, RoleColumn, CreatedAtColumn, UpdatedAtColumn, DeletedAtColumn}
	)

	return usersKanbansTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:        IDColumn,
		UserID:    UserIDColumn,
		KanbanID:  KanbanIDColumn,
		Role:      RoleColumn,
		CreatedAt: CreatedAtColumn,
		UpdatedAt: UpdatedAtColumn,
		DeletedAt: DeletedAtColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
