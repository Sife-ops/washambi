//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var Cookie = newCookieTable("zoomers", "cookie", "")

type cookieTable struct {
	postgres.Table

	// Columns
	ID        postgres.ColumnString
	HashKey   postgres.ColumnString
	BlockKey  postgres.ColumnString
	CreatedAt postgres.ColumnTimestamp

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type CookieTable struct {
	cookieTable

	EXCLUDED cookieTable
}

// AS creates new CookieTable with assigned alias
func (a CookieTable) AS(alias string) *CookieTable {
	return newCookieTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new CookieTable with assigned schema name
func (a CookieTable) FromSchema(schemaName string) *CookieTable {
	return newCookieTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new CookieTable with assigned table prefix
func (a CookieTable) WithPrefix(prefix string) *CookieTable {
	return newCookieTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new CookieTable with assigned table suffix
func (a CookieTable) WithSuffix(suffix string) *CookieTable {
	return newCookieTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newCookieTable(schemaName, tableName, alias string) *CookieTable {
	return &CookieTable{
		cookieTable: newCookieTableImpl(schemaName, tableName, alias),
		EXCLUDED:    newCookieTableImpl("", "excluded", ""),
	}
}

func newCookieTableImpl(schemaName, tableName, alias string) cookieTable {
	var (
		IDColumn        = postgres.StringColumn("id")
		HashKeyColumn   = postgres.StringColumn("hashKey")
		BlockKeyColumn  = postgres.StringColumn("blockKey")
		CreatedAtColumn = postgres.TimestampColumn("created_at")
		allColumns      = postgres.ColumnList{IDColumn, HashKeyColumn, BlockKeyColumn, CreatedAtColumn}
		mutableColumns  = postgres.ColumnList{HashKeyColumn, BlockKeyColumn, CreatedAtColumn}
	)

	return cookieTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:        IDColumn,
		HashKey:   HashKeyColumn,
		BlockKey:  BlockKeyColumn,
		CreatedAt: CreatedAtColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
