//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var ProfileField = newProfileFieldTable("nuland", "profile_field", "")

type profileFieldTable struct {
	postgres.Table

	// Columns
	ID        postgres.ColumnString
	ProfileID postgres.ColumnString
	Index     postgres.ColumnInteger
	Name      postgres.ColumnString
	Hidden    postgres.ColumnBool
	CreatedAt postgres.ColumnTimestamp
	DeletedAt postgres.ColumnTimestamp

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type ProfileFieldTable struct {
	profileFieldTable

	EXCLUDED profileFieldTable
}

// AS creates new ProfileFieldTable with assigned alias
func (a ProfileFieldTable) AS(alias string) *ProfileFieldTable {
	return newProfileFieldTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new ProfileFieldTable with assigned schema name
func (a ProfileFieldTable) FromSchema(schemaName string) *ProfileFieldTable {
	return newProfileFieldTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new ProfileFieldTable with assigned table prefix
func (a ProfileFieldTable) WithPrefix(prefix string) *ProfileFieldTable {
	return newProfileFieldTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new ProfileFieldTable with assigned table suffix
func (a ProfileFieldTable) WithSuffix(suffix string) *ProfileFieldTable {
	return newProfileFieldTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newProfileFieldTable(schemaName, tableName, alias string) *ProfileFieldTable {
	return &ProfileFieldTable{
		profileFieldTable: newProfileFieldTableImpl(schemaName, tableName, alias),
		EXCLUDED:          newProfileFieldTableImpl("", "excluded", ""),
	}
}

func newProfileFieldTableImpl(schemaName, tableName, alias string) profileFieldTable {
	var (
		IDColumn        = postgres.StringColumn("id")
		ProfileIDColumn = postgres.StringColumn("profile_id")
		IndexColumn     = postgres.IntegerColumn("index")
		NameColumn      = postgres.StringColumn("name")
		HiddenColumn    = postgres.BoolColumn("hidden")
		CreatedAtColumn = postgres.TimestampColumn("created_at")
		DeletedAtColumn = postgres.TimestampColumn("deleted_at")
		allColumns      = postgres.ColumnList{IDColumn, ProfileIDColumn, IndexColumn, NameColumn, HiddenColumn, CreatedAtColumn, DeletedAtColumn}
		mutableColumns  = postgres.ColumnList{ProfileIDColumn, IndexColumn, NameColumn, HiddenColumn, CreatedAtColumn, DeletedAtColumn}
	)

	return profileFieldTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:        IDColumn,
		ProfileID: ProfileIDColumn,
		Index:     IndexColumn,
		Name:      NameColumn,
		Hidden:    HiddenColumn,
		CreatedAt: CreatedAtColumn,
		DeletedAt: DeletedAtColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
