//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var BookmarkField = newBookmarkFieldTable("nuland", "bookmark_field", "")

type bookmarkFieldTable struct {
	postgres.Table

	// Columns
	ID         postgres.ColumnString
	BookmarkID postgres.ColumnString
	Index      postgres.ColumnInteger
	Name       postgres.ColumnString
	Hidden     postgres.ColumnBool
	CreatedAt  postgres.ColumnTimestamp
	DeletedAt  postgres.ColumnTimestamp

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type BookmarkFieldTable struct {
	bookmarkFieldTable

	EXCLUDED bookmarkFieldTable
}

// AS creates new BookmarkFieldTable with assigned alias
func (a BookmarkFieldTable) AS(alias string) *BookmarkFieldTable {
	return newBookmarkFieldTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new BookmarkFieldTable with assigned schema name
func (a BookmarkFieldTable) FromSchema(schemaName string) *BookmarkFieldTable {
	return newBookmarkFieldTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new BookmarkFieldTable with assigned table prefix
func (a BookmarkFieldTable) WithPrefix(prefix string) *BookmarkFieldTable {
	return newBookmarkFieldTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new BookmarkFieldTable with assigned table suffix
func (a BookmarkFieldTable) WithSuffix(suffix string) *BookmarkFieldTable {
	return newBookmarkFieldTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newBookmarkFieldTable(schemaName, tableName, alias string) *BookmarkFieldTable {
	return &BookmarkFieldTable{
		bookmarkFieldTable: newBookmarkFieldTableImpl(schemaName, tableName, alias),
		EXCLUDED:           newBookmarkFieldTableImpl("", "excluded", ""),
	}
}

func newBookmarkFieldTableImpl(schemaName, tableName, alias string) bookmarkFieldTable {
	var (
		IDColumn         = postgres.StringColumn("id")
		BookmarkIDColumn = postgres.StringColumn("bookmark_id")
		IndexColumn      = postgres.IntegerColumn("index")
		NameColumn       = postgres.StringColumn("name")
		HiddenColumn     = postgres.BoolColumn("hidden")
		CreatedAtColumn  = postgres.TimestampColumn("created_at")
		DeletedAtColumn  = postgres.TimestampColumn("deleted_at")
		allColumns       = postgres.ColumnList{IDColumn, BookmarkIDColumn, IndexColumn, NameColumn, HiddenColumn, CreatedAtColumn, DeletedAtColumn}
		mutableColumns   = postgres.ColumnList{BookmarkIDColumn, IndexColumn, NameColumn, HiddenColumn, CreatedAtColumn, DeletedAtColumn}
	)

	return bookmarkFieldTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:         IDColumn,
		BookmarkID: BookmarkIDColumn,
		Index:      IndexColumn,
		Name:       NameColumn,
		Hidden:     HiddenColumn,
		CreatedAt:  CreatedAtColumn,
		DeletedAt:  DeletedAtColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
