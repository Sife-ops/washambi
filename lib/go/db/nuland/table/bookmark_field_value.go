//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var BookmarkFieldValue = newBookmarkFieldValueTable("nuland", "bookmark_field_value", "")

type bookmarkFieldValueTable struct {
	postgres.Table

	// Columns
	ID              postgres.ColumnString
	BookmarkFieldID postgres.ColumnString
	Value           postgres.ColumnString
	CreatedAt       postgres.ColumnTimestamp

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type BookmarkFieldValueTable struct {
	bookmarkFieldValueTable

	EXCLUDED bookmarkFieldValueTable
}

// AS creates new BookmarkFieldValueTable with assigned alias
func (a BookmarkFieldValueTable) AS(alias string) *BookmarkFieldValueTable {
	return newBookmarkFieldValueTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new BookmarkFieldValueTable with assigned schema name
func (a BookmarkFieldValueTable) FromSchema(schemaName string) *BookmarkFieldValueTable {
	return newBookmarkFieldValueTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new BookmarkFieldValueTable with assigned table prefix
func (a BookmarkFieldValueTable) WithPrefix(prefix string) *BookmarkFieldValueTable {
	return newBookmarkFieldValueTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new BookmarkFieldValueTable with assigned table suffix
func (a BookmarkFieldValueTable) WithSuffix(suffix string) *BookmarkFieldValueTable {
	return newBookmarkFieldValueTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newBookmarkFieldValueTable(schemaName, tableName, alias string) *BookmarkFieldValueTable {
	return &BookmarkFieldValueTable{
		bookmarkFieldValueTable: newBookmarkFieldValueTableImpl(schemaName, tableName, alias),
		EXCLUDED:                newBookmarkFieldValueTableImpl("", "excluded", ""),
	}
}

func newBookmarkFieldValueTableImpl(schemaName, tableName, alias string) bookmarkFieldValueTable {
	var (
		IDColumn              = postgres.StringColumn("id")
		BookmarkFieldIDColumn = postgres.StringColumn("bookmark_field_id")
		ValueColumn           = postgres.StringColumn("value")
		CreatedAtColumn       = postgres.TimestampColumn("created_at")
		allColumns            = postgres.ColumnList{IDColumn, BookmarkFieldIDColumn, ValueColumn, CreatedAtColumn}
		mutableColumns        = postgres.ColumnList{BookmarkFieldIDColumn, ValueColumn, CreatedAtColumn}
	)

	return bookmarkFieldValueTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:              IDColumn,
		BookmarkFieldID: BookmarkFieldIDColumn,
		Value:           ValueColumn,
		CreatedAt:       CreatedAtColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
