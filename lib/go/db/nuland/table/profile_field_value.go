//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var ProfileFieldValue = newProfileFieldValueTable("nuland", "profile_field_value", "")

type profileFieldValueTable struct {
	postgres.Table

	// Columns
	ID             postgres.ColumnString
	ProfileFieldID postgres.ColumnString
	Value          postgres.ColumnString
	CreatedAt      postgres.ColumnTimestamp

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type ProfileFieldValueTable struct {
	profileFieldValueTable

	EXCLUDED profileFieldValueTable
}

// AS creates new ProfileFieldValueTable with assigned alias
func (a ProfileFieldValueTable) AS(alias string) *ProfileFieldValueTable {
	return newProfileFieldValueTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new ProfileFieldValueTable with assigned schema name
func (a ProfileFieldValueTable) FromSchema(schemaName string) *ProfileFieldValueTable {
	return newProfileFieldValueTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new ProfileFieldValueTable with assigned table prefix
func (a ProfileFieldValueTable) WithPrefix(prefix string) *ProfileFieldValueTable {
	return newProfileFieldValueTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new ProfileFieldValueTable with assigned table suffix
func (a ProfileFieldValueTable) WithSuffix(suffix string) *ProfileFieldValueTable {
	return newProfileFieldValueTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newProfileFieldValueTable(schemaName, tableName, alias string) *ProfileFieldValueTable {
	return &ProfileFieldValueTable{
		profileFieldValueTable: newProfileFieldValueTableImpl(schemaName, tableName, alias),
		EXCLUDED:               newProfileFieldValueTableImpl("", "excluded", ""),
	}
}

func newProfileFieldValueTableImpl(schemaName, tableName, alias string) profileFieldValueTable {
	var (
		IDColumn             = postgres.StringColumn("id")
		ProfileFieldIDColumn = postgres.StringColumn("profile_field_id")
		ValueColumn          = postgres.StringColumn("value")
		CreatedAtColumn      = postgres.TimestampColumn("created_at")
		allColumns           = postgres.ColumnList{IDColumn, ProfileFieldIDColumn, ValueColumn, CreatedAtColumn}
		mutableColumns       = postgres.ColumnList{ProfileFieldIDColumn, ValueColumn, CreatedAtColumn}
	)

	return profileFieldValueTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:             IDColumn,
		ProfileFieldID: ProfileFieldIDColumn,
		Value:          ValueColumn,
		CreatedAt:      CreatedAtColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
