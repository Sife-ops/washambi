// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.24.2
// source: laboof/v1/laboof.proto

package laboof

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Laboof_KanbanCreate_FullMethodName = "/laboof.v1.Laboof/KanbanCreate"
)

// LaboofClient is the client API for Laboof service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type LaboofClient interface {
	KanbanCreate(ctx context.Context, in *KanbanCreateRequest, opts ...grpc.CallOption) (*KanbanCreateResponse, error)
}

type laboofClient struct {
	cc grpc.ClientConnInterface
}

func NewLaboofClient(cc grpc.ClientConnInterface) LaboofClient {
	return &laboofClient{cc}
}

func (c *laboofClient) KanbanCreate(ctx context.Context, in *KanbanCreateRequest, opts ...grpc.CallOption) (*KanbanCreateResponse, error) {
	out := new(KanbanCreateResponse)
	err := c.cc.Invoke(ctx, Laboof_KanbanCreate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LaboofServer is the server API for Laboof service.
// All implementations must embed UnimplementedLaboofServer
// for forward compatibility
type LaboofServer interface {
	KanbanCreate(context.Context, *KanbanCreateRequest) (*KanbanCreateResponse, error)
	mustEmbedUnimplementedLaboofServer()
}

// UnimplementedLaboofServer must be embedded to have forward compatible implementations.
type UnimplementedLaboofServer struct {
}

func (UnimplementedLaboofServer) KanbanCreate(context.Context, *KanbanCreateRequest) (*KanbanCreateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method KanbanCreate not implemented")
}
func (UnimplementedLaboofServer) mustEmbedUnimplementedLaboofServer() {}

// UnsafeLaboofServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to LaboofServer will
// result in compilation errors.
type UnsafeLaboofServer interface {
	mustEmbedUnimplementedLaboofServer()
}

func RegisterLaboofServer(s grpc.ServiceRegistrar, srv LaboofServer) {
	s.RegisterService(&Laboof_ServiceDesc, srv)
}

func _Laboof_KanbanCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(KanbanCreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LaboofServer).KanbanCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Laboof_KanbanCreate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LaboofServer).KanbanCreate(ctx, req.(*KanbanCreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Laboof_ServiceDesc is the grpc.ServiceDesc for Laboof service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Laboof_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "laboof.v1.Laboof",
	HandlerType: (*LaboofServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "KanbanCreate",
			Handler:    _Laboof_KanbanCreate_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "laboof/v1/laboof.proto",
}
