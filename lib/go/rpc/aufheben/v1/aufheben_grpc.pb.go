// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.24.2
// source: aufheben/v1/aufheben.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Aufheben_TagCreate_FullMethodName      = "/aufheben.v1.Aufheben/TagCreate"
	Aufheben_TagList_FullMethodName        = "/aufheben.v1.Aufheben/TagList"
	Aufheben_TagGet_FullMethodName         = "/aufheben.v1.Aufheben/TagGet"
	Aufheben_TagUpdate_FullMethodName      = "/aufheben.v1.Aufheben/TagUpdate"
	Aufheben_TagDelete_FullMethodName      = "/aufheben.v1.Aufheben/TagDelete"
	Aufheben_TagPurge_FullMethodName       = "/aufheben.v1.Aufheben/TagPurge"
	Aufheben_DomainCreate_FullMethodName   = "/aufheben.v1.Aufheben/DomainCreate"
	Aufheben_DomainList_FullMethodName     = "/aufheben.v1.Aufheben/DomainList"
	Aufheben_DomainGet_FullMethodName      = "/aufheben.v1.Aufheben/DomainGet"
	Aufheben_DomainUpdate_FullMethodName   = "/aufheben.v1.Aufheben/DomainUpdate"
	Aufheben_DomainDelete_FullMethodName   = "/aufheben.v1.Aufheben/DomainDelete"
	Aufheben_DomainPurge_FullMethodName    = "/aufheben.v1.Aufheben/DomainPurge"
	Aufheben_BookmarkCreate_FullMethodName = "/aufheben.v1.Aufheben/BookmarkCreate"
	Aufheben_BookmarkList_FullMethodName   = "/aufheben.v1.Aufheben/BookmarkList"
	Aufheben_BookmarkGet_FullMethodName    = "/aufheben.v1.Aufheben/BookmarkGet"
	Aufheben_BookmarkUpdate_FullMethodName = "/aufheben.v1.Aufheben/BookmarkUpdate"
	Aufheben_BookmarkDelete_FullMethodName = "/aufheben.v1.Aufheben/BookmarkDelete"
	Aufheben_BookmarkPurge_FullMethodName  = "/aufheben.v1.Aufheben/BookmarkPurge"
)

// AufhebenClient is the client API for Aufheben service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AufhebenClient interface {
	TagCreate(ctx context.Context, in *TagCreateRequest, opts ...grpc.CallOption) (*TagCreateResponse, error)
	TagList(ctx context.Context, in *TagListRequest, opts ...grpc.CallOption) (*TagListResponse, error)
	TagGet(ctx context.Context, in *TagGetRequest, opts ...grpc.CallOption) (*TagGetResponse, error)
	TagUpdate(ctx context.Context, in *TagUpdateRequest, opts ...grpc.CallOption) (*TagUpdateResponse, error)
	TagDelete(ctx context.Context, in *TagDeleteRequest, opts ...grpc.CallOption) (*TagDeleteResponse, error)
	TagPurge(ctx context.Context, in *TagPurgeRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	DomainCreate(ctx context.Context, in *DomainCreateRequest, opts ...grpc.CallOption) (*DomainCreateResponse, error)
	DomainList(ctx context.Context, in *DomainListRequest, opts ...grpc.CallOption) (*DomainListResponse, error)
	DomainGet(ctx context.Context, in *DomainGetRequest, opts ...grpc.CallOption) (*DomainGetResponse, error)
	DomainUpdate(ctx context.Context, in *DomainUpdateRequest, opts ...grpc.CallOption) (*DomainUpdateResponse, error)
	DomainDelete(ctx context.Context, in *DomainDeleteRequest, opts ...grpc.CallOption) (*DomainDeleteResponse, error)
	DomainPurge(ctx context.Context, in *DomainPurgeRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	BookmarkCreate(ctx context.Context, in *BookmarkCreateRequest, opts ...grpc.CallOption) (*BookmarkCreateResponse, error)
	BookmarkList(ctx context.Context, in *BookmarkListRequest, opts ...grpc.CallOption) (*BookmarkListResponse, error)
	BookmarkGet(ctx context.Context, in *BookmarkGetRequest, opts ...grpc.CallOption) (*BookmarkGetResponse, error)
	BookmarkUpdate(ctx context.Context, in *BookmarkUpdateRequest, opts ...grpc.CallOption) (*BookmarkUpdateResponse, error)
	BookmarkDelete(ctx context.Context, in *BookmarkDeleteRequest, opts ...grpc.CallOption) (*BookmarkDeleteResponse, error)
	BookmarkPurge(ctx context.Context, in *BookmarkPurgeRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type aufhebenClient struct {
	cc grpc.ClientConnInterface
}

func NewAufhebenClient(cc grpc.ClientConnInterface) AufhebenClient {
	return &aufhebenClient{cc}
}

func (c *aufhebenClient) TagCreate(ctx context.Context, in *TagCreateRequest, opts ...grpc.CallOption) (*TagCreateResponse, error) {
	out := new(TagCreateResponse)
	err := c.cc.Invoke(ctx, Aufheben_TagCreate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aufhebenClient) TagList(ctx context.Context, in *TagListRequest, opts ...grpc.CallOption) (*TagListResponse, error) {
	out := new(TagListResponse)
	err := c.cc.Invoke(ctx, Aufheben_TagList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aufhebenClient) TagGet(ctx context.Context, in *TagGetRequest, opts ...grpc.CallOption) (*TagGetResponse, error) {
	out := new(TagGetResponse)
	err := c.cc.Invoke(ctx, Aufheben_TagGet_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aufhebenClient) TagUpdate(ctx context.Context, in *TagUpdateRequest, opts ...grpc.CallOption) (*TagUpdateResponse, error) {
	out := new(TagUpdateResponse)
	err := c.cc.Invoke(ctx, Aufheben_TagUpdate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aufhebenClient) TagDelete(ctx context.Context, in *TagDeleteRequest, opts ...grpc.CallOption) (*TagDeleteResponse, error) {
	out := new(TagDeleteResponse)
	err := c.cc.Invoke(ctx, Aufheben_TagDelete_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aufhebenClient) TagPurge(ctx context.Context, in *TagPurgeRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Aufheben_TagPurge_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aufhebenClient) DomainCreate(ctx context.Context, in *DomainCreateRequest, opts ...grpc.CallOption) (*DomainCreateResponse, error) {
	out := new(DomainCreateResponse)
	err := c.cc.Invoke(ctx, Aufheben_DomainCreate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aufhebenClient) DomainList(ctx context.Context, in *DomainListRequest, opts ...grpc.CallOption) (*DomainListResponse, error) {
	out := new(DomainListResponse)
	err := c.cc.Invoke(ctx, Aufheben_DomainList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aufhebenClient) DomainGet(ctx context.Context, in *DomainGetRequest, opts ...grpc.CallOption) (*DomainGetResponse, error) {
	out := new(DomainGetResponse)
	err := c.cc.Invoke(ctx, Aufheben_DomainGet_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aufhebenClient) DomainUpdate(ctx context.Context, in *DomainUpdateRequest, opts ...grpc.CallOption) (*DomainUpdateResponse, error) {
	out := new(DomainUpdateResponse)
	err := c.cc.Invoke(ctx, Aufheben_DomainUpdate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aufhebenClient) DomainDelete(ctx context.Context, in *DomainDeleteRequest, opts ...grpc.CallOption) (*DomainDeleteResponse, error) {
	out := new(DomainDeleteResponse)
	err := c.cc.Invoke(ctx, Aufheben_DomainDelete_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aufhebenClient) DomainPurge(ctx context.Context, in *DomainPurgeRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Aufheben_DomainPurge_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aufhebenClient) BookmarkCreate(ctx context.Context, in *BookmarkCreateRequest, opts ...grpc.CallOption) (*BookmarkCreateResponse, error) {
	out := new(BookmarkCreateResponse)
	err := c.cc.Invoke(ctx, Aufheben_BookmarkCreate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aufhebenClient) BookmarkList(ctx context.Context, in *BookmarkListRequest, opts ...grpc.CallOption) (*BookmarkListResponse, error) {
	out := new(BookmarkListResponse)
	err := c.cc.Invoke(ctx, Aufheben_BookmarkList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aufhebenClient) BookmarkGet(ctx context.Context, in *BookmarkGetRequest, opts ...grpc.CallOption) (*BookmarkGetResponse, error) {
	out := new(BookmarkGetResponse)
	err := c.cc.Invoke(ctx, Aufheben_BookmarkGet_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aufhebenClient) BookmarkUpdate(ctx context.Context, in *BookmarkUpdateRequest, opts ...grpc.CallOption) (*BookmarkUpdateResponse, error) {
	out := new(BookmarkUpdateResponse)
	err := c.cc.Invoke(ctx, Aufheben_BookmarkUpdate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aufhebenClient) BookmarkDelete(ctx context.Context, in *BookmarkDeleteRequest, opts ...grpc.CallOption) (*BookmarkDeleteResponse, error) {
	out := new(BookmarkDeleteResponse)
	err := c.cc.Invoke(ctx, Aufheben_BookmarkDelete_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aufhebenClient) BookmarkPurge(ctx context.Context, in *BookmarkPurgeRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Aufheben_BookmarkPurge_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AufhebenServer is the server API for Aufheben service.
// All implementations must embed UnimplementedAufhebenServer
// for forward compatibility
type AufhebenServer interface {
	TagCreate(context.Context, *TagCreateRequest) (*TagCreateResponse, error)
	TagList(context.Context, *TagListRequest) (*TagListResponse, error)
	TagGet(context.Context, *TagGetRequest) (*TagGetResponse, error)
	TagUpdate(context.Context, *TagUpdateRequest) (*TagUpdateResponse, error)
	TagDelete(context.Context, *TagDeleteRequest) (*TagDeleteResponse, error)
	TagPurge(context.Context, *TagPurgeRequest) (*emptypb.Empty, error)
	DomainCreate(context.Context, *DomainCreateRequest) (*DomainCreateResponse, error)
	DomainList(context.Context, *DomainListRequest) (*DomainListResponse, error)
	DomainGet(context.Context, *DomainGetRequest) (*DomainGetResponse, error)
	DomainUpdate(context.Context, *DomainUpdateRequest) (*DomainUpdateResponse, error)
	DomainDelete(context.Context, *DomainDeleteRequest) (*DomainDeleteResponse, error)
	DomainPurge(context.Context, *DomainPurgeRequest) (*emptypb.Empty, error)
	BookmarkCreate(context.Context, *BookmarkCreateRequest) (*BookmarkCreateResponse, error)
	BookmarkList(context.Context, *BookmarkListRequest) (*BookmarkListResponse, error)
	BookmarkGet(context.Context, *BookmarkGetRequest) (*BookmarkGetResponse, error)
	BookmarkUpdate(context.Context, *BookmarkUpdateRequest) (*BookmarkUpdateResponse, error)
	BookmarkDelete(context.Context, *BookmarkDeleteRequest) (*BookmarkDeleteResponse, error)
	BookmarkPurge(context.Context, *BookmarkPurgeRequest) (*emptypb.Empty, error)
	mustEmbedUnimplementedAufhebenServer()
}

// UnimplementedAufhebenServer must be embedded to have forward compatible implementations.
type UnimplementedAufhebenServer struct {
}

func (UnimplementedAufhebenServer) TagCreate(context.Context, *TagCreateRequest) (*TagCreateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TagCreate not implemented")
}
func (UnimplementedAufhebenServer) TagList(context.Context, *TagListRequest) (*TagListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TagList not implemented")
}
func (UnimplementedAufhebenServer) TagGet(context.Context, *TagGetRequest) (*TagGetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TagGet not implemented")
}
func (UnimplementedAufhebenServer) TagUpdate(context.Context, *TagUpdateRequest) (*TagUpdateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TagUpdate not implemented")
}
func (UnimplementedAufhebenServer) TagDelete(context.Context, *TagDeleteRequest) (*TagDeleteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TagDelete not implemented")
}
func (UnimplementedAufhebenServer) TagPurge(context.Context, *TagPurgeRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TagPurge not implemented")
}
func (UnimplementedAufhebenServer) DomainCreate(context.Context, *DomainCreateRequest) (*DomainCreateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DomainCreate not implemented")
}
func (UnimplementedAufhebenServer) DomainList(context.Context, *DomainListRequest) (*DomainListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DomainList not implemented")
}
func (UnimplementedAufhebenServer) DomainGet(context.Context, *DomainGetRequest) (*DomainGetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DomainGet not implemented")
}
func (UnimplementedAufhebenServer) DomainUpdate(context.Context, *DomainUpdateRequest) (*DomainUpdateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DomainUpdate not implemented")
}
func (UnimplementedAufhebenServer) DomainDelete(context.Context, *DomainDeleteRequest) (*DomainDeleteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DomainDelete not implemented")
}
func (UnimplementedAufhebenServer) DomainPurge(context.Context, *DomainPurgeRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DomainPurge not implemented")
}
func (UnimplementedAufhebenServer) BookmarkCreate(context.Context, *BookmarkCreateRequest) (*BookmarkCreateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BookmarkCreate not implemented")
}
func (UnimplementedAufhebenServer) BookmarkList(context.Context, *BookmarkListRequest) (*BookmarkListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BookmarkList not implemented")
}
func (UnimplementedAufhebenServer) BookmarkGet(context.Context, *BookmarkGetRequest) (*BookmarkGetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BookmarkGet not implemented")
}
func (UnimplementedAufhebenServer) BookmarkUpdate(context.Context, *BookmarkUpdateRequest) (*BookmarkUpdateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BookmarkUpdate not implemented")
}
func (UnimplementedAufhebenServer) BookmarkDelete(context.Context, *BookmarkDeleteRequest) (*BookmarkDeleteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BookmarkDelete not implemented")
}
func (UnimplementedAufhebenServer) BookmarkPurge(context.Context, *BookmarkPurgeRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BookmarkPurge not implemented")
}
func (UnimplementedAufhebenServer) mustEmbedUnimplementedAufhebenServer() {}

// UnsafeAufhebenServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AufhebenServer will
// result in compilation errors.
type UnsafeAufhebenServer interface {
	mustEmbedUnimplementedAufhebenServer()
}

func RegisterAufhebenServer(s grpc.ServiceRegistrar, srv AufhebenServer) {
	s.RegisterService(&Aufheben_ServiceDesc, srv)
}

func _Aufheben_TagCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TagCreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AufhebenServer).TagCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Aufheben_TagCreate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AufhebenServer).TagCreate(ctx, req.(*TagCreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Aufheben_TagList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TagListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AufhebenServer).TagList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Aufheben_TagList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AufhebenServer).TagList(ctx, req.(*TagListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Aufheben_TagGet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TagGetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AufhebenServer).TagGet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Aufheben_TagGet_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AufhebenServer).TagGet(ctx, req.(*TagGetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Aufheben_TagUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TagUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AufhebenServer).TagUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Aufheben_TagUpdate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AufhebenServer).TagUpdate(ctx, req.(*TagUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Aufheben_TagDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TagDeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AufhebenServer).TagDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Aufheben_TagDelete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AufhebenServer).TagDelete(ctx, req.(*TagDeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Aufheben_TagPurge_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TagPurgeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AufhebenServer).TagPurge(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Aufheben_TagPurge_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AufhebenServer).TagPurge(ctx, req.(*TagPurgeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Aufheben_DomainCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DomainCreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AufhebenServer).DomainCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Aufheben_DomainCreate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AufhebenServer).DomainCreate(ctx, req.(*DomainCreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Aufheben_DomainList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DomainListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AufhebenServer).DomainList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Aufheben_DomainList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AufhebenServer).DomainList(ctx, req.(*DomainListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Aufheben_DomainGet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DomainGetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AufhebenServer).DomainGet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Aufheben_DomainGet_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AufhebenServer).DomainGet(ctx, req.(*DomainGetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Aufheben_DomainUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DomainUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AufhebenServer).DomainUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Aufheben_DomainUpdate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AufhebenServer).DomainUpdate(ctx, req.(*DomainUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Aufheben_DomainDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DomainDeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AufhebenServer).DomainDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Aufheben_DomainDelete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AufhebenServer).DomainDelete(ctx, req.(*DomainDeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Aufheben_DomainPurge_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DomainPurgeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AufhebenServer).DomainPurge(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Aufheben_DomainPurge_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AufhebenServer).DomainPurge(ctx, req.(*DomainPurgeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Aufheben_BookmarkCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BookmarkCreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AufhebenServer).BookmarkCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Aufheben_BookmarkCreate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AufhebenServer).BookmarkCreate(ctx, req.(*BookmarkCreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Aufheben_BookmarkList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BookmarkListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AufhebenServer).BookmarkList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Aufheben_BookmarkList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AufhebenServer).BookmarkList(ctx, req.(*BookmarkListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Aufheben_BookmarkGet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BookmarkGetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AufhebenServer).BookmarkGet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Aufheben_BookmarkGet_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AufhebenServer).BookmarkGet(ctx, req.(*BookmarkGetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Aufheben_BookmarkUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BookmarkUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AufhebenServer).BookmarkUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Aufheben_BookmarkUpdate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AufhebenServer).BookmarkUpdate(ctx, req.(*BookmarkUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Aufheben_BookmarkDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BookmarkDeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AufhebenServer).BookmarkDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Aufheben_BookmarkDelete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AufhebenServer).BookmarkDelete(ctx, req.(*BookmarkDeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Aufheben_BookmarkPurge_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BookmarkPurgeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AufhebenServer).BookmarkPurge(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Aufheben_BookmarkPurge_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AufhebenServer).BookmarkPurge(ctx, req.(*BookmarkPurgeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Aufheben_ServiceDesc is the grpc.ServiceDesc for Aufheben service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Aufheben_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "aufheben.v1.Aufheben",
	HandlerType: (*AufhebenServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "TagCreate",
			Handler:    _Aufheben_TagCreate_Handler,
		},
		{
			MethodName: "TagList",
			Handler:    _Aufheben_TagList_Handler,
		},
		{
			MethodName: "TagGet",
			Handler:    _Aufheben_TagGet_Handler,
		},
		{
			MethodName: "TagUpdate",
			Handler:    _Aufheben_TagUpdate_Handler,
		},
		{
			MethodName: "TagDelete",
			Handler:    _Aufheben_TagDelete_Handler,
		},
		{
			MethodName: "TagPurge",
			Handler:    _Aufheben_TagPurge_Handler,
		},
		{
			MethodName: "DomainCreate",
			Handler:    _Aufheben_DomainCreate_Handler,
		},
		{
			MethodName: "DomainList",
			Handler:    _Aufheben_DomainList_Handler,
		},
		{
			MethodName: "DomainGet",
			Handler:    _Aufheben_DomainGet_Handler,
		},
		{
			MethodName: "DomainUpdate",
			Handler:    _Aufheben_DomainUpdate_Handler,
		},
		{
			MethodName: "DomainDelete",
			Handler:    _Aufheben_DomainDelete_Handler,
		},
		{
			MethodName: "DomainPurge",
			Handler:    _Aufheben_DomainPurge_Handler,
		},
		{
			MethodName: "BookmarkCreate",
			Handler:    _Aufheben_BookmarkCreate_Handler,
		},
		{
			MethodName: "BookmarkList",
			Handler:    _Aufheben_BookmarkList_Handler,
		},
		{
			MethodName: "BookmarkGet",
			Handler:    _Aufheben_BookmarkGet_Handler,
		},
		{
			MethodName: "BookmarkUpdate",
			Handler:    _Aufheben_BookmarkUpdate_Handler,
		},
		{
			MethodName: "BookmarkDelete",
			Handler:    _Aufheben_BookmarkDelete_Handler,
		},
		{
			MethodName: "BookmarkPurge",
			Handler:    _Aufheben_BookmarkPurge_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "aufheben/v1/aufheben.proto",
}
