// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.24.2
// source: shishamo/v1/shishamo.proto

package shishamo

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Shishamo_UserCreate_FullMethodName         = "/shishamo.v1.Shishamo/UserCreate"
	Shishamo_UserGetOne_FullMethodName         = "/shishamo.v1.Shishamo/UserGetOne"
	Shishamo_UserChangePassword_FullMethodName = "/shishamo.v1.Shishamo/UserChangePassword"
	Shishamo_UserPurge_FullMethodName          = "/shishamo.v1.Shishamo/UserPurge"
	Shishamo_UserGetToken_FullMethodName       = "/shishamo.v1.Shishamo/UserGetToken"
	Shishamo_UserVerifyToken_FullMethodName    = "/shishamo.v1.Shishamo/UserVerifyToken"
	Shishamo_DomainCreate_FullMethodName       = "/shishamo.v1.Shishamo/DomainCreate"
	Shishamo_DomainGetAll_FullMethodName       = "/shishamo.v1.Shishamo/DomainGetAll"
	Shishamo_DomainGetOne_FullMethodName       = "/shishamo.v1.Shishamo/DomainGetOne"
	Shishamo_DomainDelete_FullMethodName       = "/shishamo.v1.Shishamo/DomainDelete"
	Shishamo_DomainPurge_FullMethodName        = "/shishamo.v1.Shishamo/DomainPurge"
	Shishamo_BookmarkCreate_FullMethodName     = "/shishamo.v1.Shishamo/BookmarkCreate"
	Shishamo_BookmarkGetAll_FullMethodName     = "/shishamo.v1.Shishamo/BookmarkGetAll"
	Shishamo_BookmarkGetOne_FullMethodName     = "/shishamo.v1.Shishamo/BookmarkGetOne"
	Shishamo_BookmarkDelete_FullMethodName     = "/shishamo.v1.Shishamo/BookmarkDelete"
	Shishamo_BookmarkPurge_FullMethodName      = "/shishamo.v1.Shishamo/BookmarkPurge"
)

// ShishamoClient is the client API for Shishamo service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ShishamoClient interface {
	UserCreate(ctx context.Context, in *UserCreateRequest, opts ...grpc.CallOption) (*UserCreateResponse, error)
	UserGetOne(ctx context.Context, in *UserGetOneRequest, opts ...grpc.CallOption) (*UserGetOneResponse, error)
	UserChangePassword(ctx context.Context, in *UserChangePasswordRequest, opts ...grpc.CallOption) (*UserChangePasswordResponse, error)
	UserPurge(ctx context.Context, in *UserPurgeRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// todo: UserDisable
	UserGetToken(ctx context.Context, in *UserGetTokenRequest, opts ...grpc.CallOption) (*UserGetTokenResponse, error)
	UserVerifyToken(ctx context.Context, in *UserVerifyTokenRequest, opts ...grpc.CallOption) (*UserVerifyTokenResponse, error)
	DomainCreate(ctx context.Context, in *DomainCreateRequest, opts ...grpc.CallOption) (*DomainCreateResponse, error)
	DomainGetAll(ctx context.Context, in *DomainGetAllRequest, opts ...grpc.CallOption) (*DomainGetAllResponse, error)
	DomainGetOne(ctx context.Context, in *DomainGetOneRequest, opts ...grpc.CallOption) (*DomainGetOneResponse, error)
	DomainDelete(ctx context.Context, in *DomainDeleteRequest, opts ...grpc.CallOption) (*DomainDeleteResponse, error)
	DomainPurge(ctx context.Context, in *DomainPurgeRequest, opts ...grpc.CallOption) (*DomainPurgeResponse, error)
	BookmarkCreate(ctx context.Context, in *BookmarkCreateRequest, opts ...grpc.CallOption) (*BookmarkCreateResponse, error)
	BookmarkGetAll(ctx context.Context, in *BookmarkGetAllRequest, opts ...grpc.CallOption) (*BookmarkGetAllResponse, error)
	BookmarkGetOne(ctx context.Context, in *BookmarkGetOneRequest, opts ...grpc.CallOption) (*BookmarkGetOneResponse, error)
	BookmarkDelete(ctx context.Context, in *BookmarkDeleteRequest, opts ...grpc.CallOption) (*BookmarkDeleteResponse, error)
	BookmarkPurge(ctx context.Context, in *BookmarkPurgeRequest, opts ...grpc.CallOption) (*BookmarkPurgeResponse, error)
}

type shishamoClient struct {
	cc grpc.ClientConnInterface
}

func NewShishamoClient(cc grpc.ClientConnInterface) ShishamoClient {
	return &shishamoClient{cc}
}

func (c *shishamoClient) UserCreate(ctx context.Context, in *UserCreateRequest, opts ...grpc.CallOption) (*UserCreateResponse, error) {
	out := new(UserCreateResponse)
	err := c.cc.Invoke(ctx, Shishamo_UserCreate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shishamoClient) UserGetOne(ctx context.Context, in *UserGetOneRequest, opts ...grpc.CallOption) (*UserGetOneResponse, error) {
	out := new(UserGetOneResponse)
	err := c.cc.Invoke(ctx, Shishamo_UserGetOne_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shishamoClient) UserChangePassword(ctx context.Context, in *UserChangePasswordRequest, opts ...grpc.CallOption) (*UserChangePasswordResponse, error) {
	out := new(UserChangePasswordResponse)
	err := c.cc.Invoke(ctx, Shishamo_UserChangePassword_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shishamoClient) UserPurge(ctx context.Context, in *UserPurgeRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Shishamo_UserPurge_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shishamoClient) UserGetToken(ctx context.Context, in *UserGetTokenRequest, opts ...grpc.CallOption) (*UserGetTokenResponse, error) {
	out := new(UserGetTokenResponse)
	err := c.cc.Invoke(ctx, Shishamo_UserGetToken_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shishamoClient) UserVerifyToken(ctx context.Context, in *UserVerifyTokenRequest, opts ...grpc.CallOption) (*UserVerifyTokenResponse, error) {
	out := new(UserVerifyTokenResponse)
	err := c.cc.Invoke(ctx, Shishamo_UserVerifyToken_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shishamoClient) DomainCreate(ctx context.Context, in *DomainCreateRequest, opts ...grpc.CallOption) (*DomainCreateResponse, error) {
	out := new(DomainCreateResponse)
	err := c.cc.Invoke(ctx, Shishamo_DomainCreate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shishamoClient) DomainGetAll(ctx context.Context, in *DomainGetAllRequest, opts ...grpc.CallOption) (*DomainGetAllResponse, error) {
	out := new(DomainGetAllResponse)
	err := c.cc.Invoke(ctx, Shishamo_DomainGetAll_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shishamoClient) DomainGetOne(ctx context.Context, in *DomainGetOneRequest, opts ...grpc.CallOption) (*DomainGetOneResponse, error) {
	out := new(DomainGetOneResponse)
	err := c.cc.Invoke(ctx, Shishamo_DomainGetOne_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shishamoClient) DomainDelete(ctx context.Context, in *DomainDeleteRequest, opts ...grpc.CallOption) (*DomainDeleteResponse, error) {
	out := new(DomainDeleteResponse)
	err := c.cc.Invoke(ctx, Shishamo_DomainDelete_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shishamoClient) DomainPurge(ctx context.Context, in *DomainPurgeRequest, opts ...grpc.CallOption) (*DomainPurgeResponse, error) {
	out := new(DomainPurgeResponse)
	err := c.cc.Invoke(ctx, Shishamo_DomainPurge_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shishamoClient) BookmarkCreate(ctx context.Context, in *BookmarkCreateRequest, opts ...grpc.CallOption) (*BookmarkCreateResponse, error) {
	out := new(BookmarkCreateResponse)
	err := c.cc.Invoke(ctx, Shishamo_BookmarkCreate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shishamoClient) BookmarkGetAll(ctx context.Context, in *BookmarkGetAllRequest, opts ...grpc.CallOption) (*BookmarkGetAllResponse, error) {
	out := new(BookmarkGetAllResponse)
	err := c.cc.Invoke(ctx, Shishamo_BookmarkGetAll_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shishamoClient) BookmarkGetOne(ctx context.Context, in *BookmarkGetOneRequest, opts ...grpc.CallOption) (*BookmarkGetOneResponse, error) {
	out := new(BookmarkGetOneResponse)
	err := c.cc.Invoke(ctx, Shishamo_BookmarkGetOne_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shishamoClient) BookmarkDelete(ctx context.Context, in *BookmarkDeleteRequest, opts ...grpc.CallOption) (*BookmarkDeleteResponse, error) {
	out := new(BookmarkDeleteResponse)
	err := c.cc.Invoke(ctx, Shishamo_BookmarkDelete_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shishamoClient) BookmarkPurge(ctx context.Context, in *BookmarkPurgeRequest, opts ...grpc.CallOption) (*BookmarkPurgeResponse, error) {
	out := new(BookmarkPurgeResponse)
	err := c.cc.Invoke(ctx, Shishamo_BookmarkPurge_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ShishamoServer is the server API for Shishamo service.
// All implementations must embed UnimplementedShishamoServer
// for forward compatibility
type ShishamoServer interface {
	UserCreate(context.Context, *UserCreateRequest) (*UserCreateResponse, error)
	UserGetOne(context.Context, *UserGetOneRequest) (*UserGetOneResponse, error)
	UserChangePassword(context.Context, *UserChangePasswordRequest) (*UserChangePasswordResponse, error)
	UserPurge(context.Context, *UserPurgeRequest) (*emptypb.Empty, error)
	// todo: UserDisable
	UserGetToken(context.Context, *UserGetTokenRequest) (*UserGetTokenResponse, error)
	UserVerifyToken(context.Context, *UserVerifyTokenRequest) (*UserVerifyTokenResponse, error)
	DomainCreate(context.Context, *DomainCreateRequest) (*DomainCreateResponse, error)
	DomainGetAll(context.Context, *DomainGetAllRequest) (*DomainGetAllResponse, error)
	DomainGetOne(context.Context, *DomainGetOneRequest) (*DomainGetOneResponse, error)
	DomainDelete(context.Context, *DomainDeleteRequest) (*DomainDeleteResponse, error)
	DomainPurge(context.Context, *DomainPurgeRequest) (*DomainPurgeResponse, error)
	BookmarkCreate(context.Context, *BookmarkCreateRequest) (*BookmarkCreateResponse, error)
	BookmarkGetAll(context.Context, *BookmarkGetAllRequest) (*BookmarkGetAllResponse, error)
	BookmarkGetOne(context.Context, *BookmarkGetOneRequest) (*BookmarkGetOneResponse, error)
	BookmarkDelete(context.Context, *BookmarkDeleteRequest) (*BookmarkDeleteResponse, error)
	BookmarkPurge(context.Context, *BookmarkPurgeRequest) (*BookmarkPurgeResponse, error)
	mustEmbedUnimplementedShishamoServer()
}

// UnimplementedShishamoServer must be embedded to have forward compatible implementations.
type UnimplementedShishamoServer struct {
}

func (UnimplementedShishamoServer) UserCreate(context.Context, *UserCreateRequest) (*UserCreateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserCreate not implemented")
}
func (UnimplementedShishamoServer) UserGetOne(context.Context, *UserGetOneRequest) (*UserGetOneResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserGetOne not implemented")
}
func (UnimplementedShishamoServer) UserChangePassword(context.Context, *UserChangePasswordRequest) (*UserChangePasswordResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserChangePassword not implemented")
}
func (UnimplementedShishamoServer) UserPurge(context.Context, *UserPurgeRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserPurge not implemented")
}
func (UnimplementedShishamoServer) UserGetToken(context.Context, *UserGetTokenRequest) (*UserGetTokenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserGetToken not implemented")
}
func (UnimplementedShishamoServer) UserVerifyToken(context.Context, *UserVerifyTokenRequest) (*UserVerifyTokenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserVerifyToken not implemented")
}
func (UnimplementedShishamoServer) DomainCreate(context.Context, *DomainCreateRequest) (*DomainCreateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DomainCreate not implemented")
}
func (UnimplementedShishamoServer) DomainGetAll(context.Context, *DomainGetAllRequest) (*DomainGetAllResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DomainGetAll not implemented")
}
func (UnimplementedShishamoServer) DomainGetOne(context.Context, *DomainGetOneRequest) (*DomainGetOneResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DomainGetOne not implemented")
}
func (UnimplementedShishamoServer) DomainDelete(context.Context, *DomainDeleteRequest) (*DomainDeleteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DomainDelete not implemented")
}
func (UnimplementedShishamoServer) DomainPurge(context.Context, *DomainPurgeRequest) (*DomainPurgeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DomainPurge not implemented")
}
func (UnimplementedShishamoServer) BookmarkCreate(context.Context, *BookmarkCreateRequest) (*BookmarkCreateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BookmarkCreate not implemented")
}
func (UnimplementedShishamoServer) BookmarkGetAll(context.Context, *BookmarkGetAllRequest) (*BookmarkGetAllResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BookmarkGetAll not implemented")
}
func (UnimplementedShishamoServer) BookmarkGetOne(context.Context, *BookmarkGetOneRequest) (*BookmarkGetOneResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BookmarkGetOne not implemented")
}
func (UnimplementedShishamoServer) BookmarkDelete(context.Context, *BookmarkDeleteRequest) (*BookmarkDeleteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BookmarkDelete not implemented")
}
func (UnimplementedShishamoServer) BookmarkPurge(context.Context, *BookmarkPurgeRequest) (*BookmarkPurgeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BookmarkPurge not implemented")
}
func (UnimplementedShishamoServer) mustEmbedUnimplementedShishamoServer() {}

// UnsafeShishamoServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ShishamoServer will
// result in compilation errors.
type UnsafeShishamoServer interface {
	mustEmbedUnimplementedShishamoServer()
}

func RegisterShishamoServer(s grpc.ServiceRegistrar, srv ShishamoServer) {
	s.RegisterService(&Shishamo_ServiceDesc, srv)
}

func _Shishamo_UserCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserCreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShishamoServer).UserCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Shishamo_UserCreate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShishamoServer).UserCreate(ctx, req.(*UserCreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Shishamo_UserGetOne_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserGetOneRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShishamoServer).UserGetOne(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Shishamo_UserGetOne_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShishamoServer).UserGetOne(ctx, req.(*UserGetOneRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Shishamo_UserChangePassword_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserChangePasswordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShishamoServer).UserChangePassword(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Shishamo_UserChangePassword_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShishamoServer).UserChangePassword(ctx, req.(*UserChangePasswordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Shishamo_UserPurge_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserPurgeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShishamoServer).UserPurge(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Shishamo_UserPurge_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShishamoServer).UserPurge(ctx, req.(*UserPurgeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Shishamo_UserGetToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserGetTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShishamoServer).UserGetToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Shishamo_UserGetToken_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShishamoServer).UserGetToken(ctx, req.(*UserGetTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Shishamo_UserVerifyToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserVerifyTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShishamoServer).UserVerifyToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Shishamo_UserVerifyToken_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShishamoServer).UserVerifyToken(ctx, req.(*UserVerifyTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Shishamo_DomainCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DomainCreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShishamoServer).DomainCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Shishamo_DomainCreate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShishamoServer).DomainCreate(ctx, req.(*DomainCreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Shishamo_DomainGetAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DomainGetAllRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShishamoServer).DomainGetAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Shishamo_DomainGetAll_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShishamoServer).DomainGetAll(ctx, req.(*DomainGetAllRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Shishamo_DomainGetOne_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DomainGetOneRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShishamoServer).DomainGetOne(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Shishamo_DomainGetOne_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShishamoServer).DomainGetOne(ctx, req.(*DomainGetOneRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Shishamo_DomainDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DomainDeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShishamoServer).DomainDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Shishamo_DomainDelete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShishamoServer).DomainDelete(ctx, req.(*DomainDeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Shishamo_DomainPurge_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DomainPurgeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShishamoServer).DomainPurge(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Shishamo_DomainPurge_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShishamoServer).DomainPurge(ctx, req.(*DomainPurgeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Shishamo_BookmarkCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BookmarkCreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShishamoServer).BookmarkCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Shishamo_BookmarkCreate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShishamoServer).BookmarkCreate(ctx, req.(*BookmarkCreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Shishamo_BookmarkGetAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BookmarkGetAllRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShishamoServer).BookmarkGetAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Shishamo_BookmarkGetAll_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShishamoServer).BookmarkGetAll(ctx, req.(*BookmarkGetAllRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Shishamo_BookmarkGetOne_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BookmarkGetOneRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShishamoServer).BookmarkGetOne(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Shishamo_BookmarkGetOne_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShishamoServer).BookmarkGetOne(ctx, req.(*BookmarkGetOneRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Shishamo_BookmarkDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BookmarkDeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShishamoServer).BookmarkDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Shishamo_BookmarkDelete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShishamoServer).BookmarkDelete(ctx, req.(*BookmarkDeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Shishamo_BookmarkPurge_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BookmarkPurgeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShishamoServer).BookmarkPurge(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Shishamo_BookmarkPurge_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShishamoServer).BookmarkPurge(ctx, req.(*BookmarkPurgeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Shishamo_ServiceDesc is the grpc.ServiceDesc for Shishamo service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Shishamo_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "shishamo.v1.Shishamo",
	HandlerType: (*ShishamoServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UserCreate",
			Handler:    _Shishamo_UserCreate_Handler,
		},
		{
			MethodName: "UserGetOne",
			Handler:    _Shishamo_UserGetOne_Handler,
		},
		{
			MethodName: "UserChangePassword",
			Handler:    _Shishamo_UserChangePassword_Handler,
		},
		{
			MethodName: "UserPurge",
			Handler:    _Shishamo_UserPurge_Handler,
		},
		{
			MethodName: "UserGetToken",
			Handler:    _Shishamo_UserGetToken_Handler,
		},
		{
			MethodName: "UserVerifyToken",
			Handler:    _Shishamo_UserVerifyToken_Handler,
		},
		{
			MethodName: "DomainCreate",
			Handler:    _Shishamo_DomainCreate_Handler,
		},
		{
			MethodName: "DomainGetAll",
			Handler:    _Shishamo_DomainGetAll_Handler,
		},
		{
			MethodName: "DomainGetOne",
			Handler:    _Shishamo_DomainGetOne_Handler,
		},
		{
			MethodName: "DomainDelete",
			Handler:    _Shishamo_DomainDelete_Handler,
		},
		{
			MethodName: "DomainPurge",
			Handler:    _Shishamo_DomainPurge_Handler,
		},
		{
			MethodName: "BookmarkCreate",
			Handler:    _Shishamo_BookmarkCreate_Handler,
		},
		{
			MethodName: "BookmarkGetAll",
			Handler:    _Shishamo_BookmarkGetAll_Handler,
		},
		{
			MethodName: "BookmarkGetOne",
			Handler:    _Shishamo_BookmarkGetOne_Handler,
		},
		{
			MethodName: "BookmarkDelete",
			Handler:    _Shishamo_BookmarkDelete_Handler,
		},
		{
			MethodName: "BookmarkPurge",
			Handler:    _Shishamo_BookmarkPurge_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "shishamo/v1/shishamo.proto",
}
